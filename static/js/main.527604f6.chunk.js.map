{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","filter","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAExB,OACA,yBAAKC,UAAU,sDACV,yBAAKC,IAAK,MAAMC,IAAG,+BAA0BH,EAA1B,cACpB,6BACI,4BAAKF,GACL,2BAAIC,MCIDK,EAVE,SAAC,GAAsB,EAApBC,OAAqB,IAAbC,EAAY,EAAZA,OACxB,OACA,6BACCA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIM,EAAOG,GAAGT,GAAIF,KAAMQ,EAAOG,GAAGX,KAAMC,MAAOO,EAAOG,GAAGV,aCKxEY,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OAAO,6BACC,2BACCX,UAAU,sCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,IALZ,MCOII,EATA,SAACC,GACf,OACA,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCwCMC,G,kBApCX,aAAc,IAAD,8BACb,+CAaAC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAO,CACRxB,OAAQ,GACRqB,YAAa,IAJJ,E,iFAQO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACpB,OAAQ6B,S,+BAQhC,IAAD,OACFC,EAAiBC,KAAKP,MAAMxB,OAAOD,QAAO,SAAAiC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGpE,OACA,yBAAKtC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcyB,KAAKb,iBAC7B,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GA9BZK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.527604f6.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id}) =>{\n    // const {name, email} = props;\n    return (\n    <div className='bg-light-blue dib br3 pa3 ma2 grow tc bw2 shadow-5'>\n         <img alt= 'img' src={`https://robohash.org/${id}?200x200`}/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ filter, robots }) =>{\n    return (\n    <div>\n    {robots.map((user,i) =>{\n        return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\n    })}\n    </div>\n    )\n};\n\nexport default CardList;\n\n","import React from \"react\";\n\n\nconst SearchBox = ({searchChange}) => {\n    return(<div > \n            <input \n             className='pa3 ba b--green tc bg-lightest-blue'\n             type='search' \n             placeholder='Search Robots'\n             onChange={searchChange}\n              /> </div>)\n};\n\nexport default SearchBox; \n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t{props.children}\n\t</div>\n\t);\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\n// import {robots} from './robots';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\n\nclass App extends Component{\n    constructor(){\n    super()\n    this.state ={\n        robots: [],\n        searchField: ''    \n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users =>this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});  \n    }\n\n\n    render(){    \n    const filteredRobots = this.state.robots.filter(robot =>{ \n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()) \n    })\n\n    return (\n    <div className='tc'>    \n        <h1 className='f1'>Robofriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n         <Scroll>\n            <CardList robots={filteredRobots}/>\n         </Scroll>\n    </div>  \n    )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();  \n"],"sourceRoot":""}